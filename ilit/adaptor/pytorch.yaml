---
-
  version:
    name: '1.6'

  precisions: &default_precisions
    names: int8, uint8, fp32
    valid_mixed_precisions: []

  ops: &default_ops
    # For PyTorch, quantizable op list is provided by torch/quantization/quantization_mappings.py
    int8: []
    uint8: []
    fp32: ['*'] # '*' means all op types
  
  capabilities: &default_capabilities
    cpu: {
        'weight': {
                    'dtype': ['int8', 'fp32'],
                    'scheme': ['asym', 'sym'],
                    'granularity': ['per_channel'],
                    'algorithm': ['minmax']
                    },
        'activation': {
                    'dtype': ['uint8', 'fp32'],
                    'scheme': ['asym', 'sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['kl', 'minmax']
                    }
        }

    gpu: {
        'weight': {
                    'dtype': ['int8', 'fp32'],
                    'scheme': ['sym'],
                    'granularity': ['per_channel'],
                    'algorithm': ['minmax']
                    },
        'activation': {
                    'dtype': ['uint8', 'fp32', 'int8'],
                    'scheme': ['sym'],
                    'granularity': ['per_tensor'],
                    'algorithm': ['minmax']
                    }
        }

  patterns:
    fp32: [ #TODO Add more patterns here to demonstrate our concept the results external engine should return.
        'Conv1d + BN1d',
        'Conv2d + BN2d',
        'Conv3d + BN3d',
        ]
    int8: &ref_1_6_s8 [
        'Conv1d + BN1d',
        'Conv2d + BN2d',
        'Conv3d + BN3d',
        'Conv1d + BN1d + Relu',
        'Conv2d + BN2d + Relu',
        'Conv3d + BN3d + Relu',
        'Conv1d + Relu',
        'Conv2d + Relu',
        'Conv3d + Relu',
        'Linear + Relu',
        'BN2d + Relu',
        'BN3d + Relu',
        ]
    uint8: *ref_1_6_s8

-
  version:
    name: '1.3'

  precisions:
    << : *default_precisions

  ops:
    << : *default_ops
  
  capabilities:
    << : *default_capabilities

  patterns:
    fp32: [ #TODO Add more patterns here to demonstrate our concept the results external engine should return.
        'Conv2d + BN2d',
        ]
    int8: &ref_1_3_s8 [
        'Conv2D + BN2d',
        'Conv2D + BN2d + Relu',
        'Conv2D + Relu',
        'Linear + Relu',
        ]
    uint8: *ref_1_3_s8

-
  version:
    name: 'default'

  precisions:
    << : *default_precisions

  ops:
    << : *default_ops
  
  capabilities:
    << : *default_capabilities

  patterns:
    fp32: [ #TODO Add more patterns here to demonstrate our concept the results external engine should return.
        'Conv2d + BN2d',
        ]
    int8: &ref_1_2_s8 [
        'Conv2D + BN2d',
        'Conv2D + BN2d + Relu',
        ]
    uint8: *ref_1_2_s8
